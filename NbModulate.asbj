% nbiot ifft, refine from LTE lib  
% @ziyubiti
% @20180625

function [waveform,info] = NbModulate(grid,varargin)
   
    nSC = size(grid,1);  
    
    info = NbiotInfo();
    nFFT = double(info.Nfft);
    nAnts = size(grid,3);
    cpLengths = double(info.CyclicPrefixLengths);
    symbolsPerSlot = numel(cpLengths)/2;
    nSubframes = floor(size(grid,2)/(symbolsPerSlot*2));
     
    if (nargin==2)
        N = varargin{1};
        mwltelibrary('validateLTEParameters',setfield(struct(),'Windowing',N),'Windowing');
    else
        N = double(info.Windowing);
    end
    if (~isscalar(N))
        error('lte:error','The Windowing parameter must be an even scalar integer.');
    end    
    if (N>(nFFT-info.CyclicPrefixLengths(1)))
        error('lte:error','For the Windowing parameter the value (%d) must be less than or equal to %d (the IFFT size (%d) minus the longest cyclic prefix length (%d))',N,nFFT-info.CyclicPrefixLengths(1),nFFT,info.CyclicPrefixLengths(1));
    end
    if (mod(N,2)~=0)
        error('lte:error','For the Windowing parameter the value (%d) must be even.',N);
    end
    info.Windowing = N;
    
    firstSC = (nFFT/2) - (nSC/2) + 1;
       
       
    if(size(grid,1)==0)
        nSubframes = 0;
    end
    if (nSubframes==0)
       head = 0;
       N = 0;
    end
   
    samplesPerSubframe = sum(cpLengths) + (nFFT*symbolsPerSlot*2);
    waveform = zeros(nSubframes*samplesPerSubframe,nAnts);
    
    window0 = raised_cosine_window(nFFT+cpLengths(1),N);
    window1 = raised_cosine_window(nFFT+cpLengths(2),N);
    
    pos = 0;
    % for each OFDM symbol:
    for i = 1:nSubframes*symbolsPerSlot*2

        % create IFFT input (map subcarriers)
        if (size(grid,1)==nFFT)
            ifftin = squeeze(grid(:,i,:));
        else
            ifftin = zeros(nFFT,nAnts);
            ifftin(firstSC+(0:nSC-1),:) = grid(:,i,:);
        end

        % perform IFFT
        iffout = ifft(fftshift(ifftin,1))*sqrt(nFFT);
        cpLength = cpLengths(mod(i-1,length(cpLengths))+1);
        extended = [iffout(end-(cpLength+N)+1:end,:); iffout];
        extended = extended .* exp(1i*pi*((-cpLength-N):(nFFT-1))/nFFT).';
        
        if (mod(i-1,symbolsPerSlot)==0)
            windowed = extended .* window0;
        else
            windowed = extended .* window1;
        end
      
        if (i==1)
            % first OFDM symbol: chop the "head" and then output the rest
            head = windowed(1:N,:);
            L = cpLength + nFFT;
            waveform(1:L,:) = windowed(N+1:end,:);
        else           
            L = cpLength + nFFT + N;
            waveform(pos-N+(1:L),:) = waveform(pos-N+(1:L),:) + windowed;
        end
        
        % Update 'pos' to point to the end of the current OFDM symbol
        pos = pos + cpLength + nFFT;
        
    end

    % finally, overlap the "head" with the very end of the signal
    waveform(end-N+1:end,:) = waveform(end-N+1:end,:) + head;

end


function p = raised_cosine_window(n,w)
    
    p = 0.5*(1-sin(pi*(w+1-2*(1:w).')/(2*w)));
    p = [p; ones(n-w,1); flipud(p)];
    
end
